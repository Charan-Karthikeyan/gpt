
/* reserved words */
%token DEFINE
%token DOMAIN
%token CDOMAIN
%token PROBLEM
%token REQUIREMENTS
%token TYPES
%token FUNCTIONS
%token PREDICATES
%token PREDICATE
%token EXTERNAL
%token OBJECTS
%token ACTION
%token PARAMETERS
%token PRECONDITION
%token EFFECT 
%token COST
%token SUM
%token OBSERVATION
%token WHEN
%token INIT
%token GOAL
%token PACKAGE
%token RAMIFICATION
%token FORMULA
%token SET
%token IN
%token ONEOF
%token PRINT
%token PRINTSTATE
%token ASSERT
%token HOOKS
%token BELIEF
%token HEURISTIC

/* models */
%token MODEL
%token PLANNING
%token CONFORMANT
%token ND_MDP
%token ND_POMDP
%token MDP
%token POMDP

%token DYNAMICS
%token DETERMINISTIC
%token NON_DETERMINISTIC
%token PROBABILISTIC
%token FEEDBACK
%token COMPLETE
%token PARTIAL
%token NULLF

/* primitive types */
%token INTEGER
%token BOOLEAN
%token ARRAY

/* parentesis and punctuation symbols */
%token LEFTPAR
%token RIGHTPAR
%token LEFTSQPAR
%token RIGHTSQPAR
%token LEFTCURLY
%token RIGHTCURLY
%token LEFTANGLE
%token RIGHTANGLE
%token COLON
%token STAR
%token HYPHEN
%token COMMA

/* formula symbols */
%token NOT
%token AND
%token OR
%token IF
%token IFF

/* term symbols */
%token EQUAL
%token LT
%token LE
%token GE
%token GT

/* function symbols */
%token PLUS

/* quantifier symbols */
%token EXISTS
%token FORALL

/*
** proper tokens: tokens returned by the lexer with yylval values
** associated.
*/
%token TOK_IDENT
%token TOK_VIDENT
%token TOK_INTEGER
%token TOK_FLOAT
%token TOK_BOOLEAN
%token TOK_STRING
%token TOK_FUNCTION
%token TOK_PREDICATE


/*
** Grammar starts here
*/

%%

start             :  code_chunks
                  ;

code_chunks       :  code_chunks domain
                  |  code_chunks problem
                  |  /* empty */
                  ;

domain            :  LEFTPAR DEFINE LEFTPAR DOMAIN TOK_IDENT RIGHTPAR
                       LEFTPAR global_list definition_list ramification_list action_list RIGHTPAR
                  ;

global_list       :  global_list global LEFTPAR
                  |  global LEFTPAR
                  ; 

global            :  MODEL model_def RIGHTPAR
                  |  REQUIREMENTS requirement_list RIGHTPAR
                  |  TYPES type_list RIGHTPAR
                  |  FUNCTIONS function_list RIGHTPAR
                  |  PREDICATES predicate_list RIGHTPAR
                  |  EXTERNAL external_list RIGHTPAR
                  |  OBJECTS object_list RIGHTPAR
                  ;

model_def         :  model_def dynamics_def
                  |  model_def feedback_def
                  |  /* empty */
                  ;

dynamics_def      :  LEFTPAR DYNAMICS DETERMINISTIC RIGHTPAR
                  |  LEFTPAR DYNAMICS NON_DETERMINISTIC RIGHTPAR
                  |  LEFTPAR DYNAMICS PROBABILISTIC RIGHTPAR
                  ;

feedback_def      :  LEFTPAR FEEDBACK COMPLETE RIGHTPAR
                  |  LEFTPAR FEEDBACK PARTIAL RIGHTPAR
                  |  LEFTPAR FEEDBACK NULLF RIGHTPAR
                  ;

requirement_list  :  requirement_list requirement
                  |  requirement
                  ;

requirement       :  LEFTPAR PACKAGE TOK_IDENT RIGHTPAR rest_requirement
                  ;

rest_requirement  :  package
                  ;

type_list         :  type_list type_def
                  |  type_def
                  ;

type_def          :  TOK_IDENT ancestor_list
                  |  TOK_IDENT
                  ;

ancestor_list     :  ancestor_list ancestor
                  |  ancestor
                  ;

ancestor          :  COLON COLON TOK_IDENT
                  ;

function_list     :  function_list function
                  |  function
                  ;

function          :  LEFTPAR TOK_IDENT compound_type_decl simple_type_decl RIGHTPAR
                  ;

predicate_list    :  predicate_list predicate
                  |  predicate
                  ;

predicate         :  LEFTPAR TOK_IDENT simple_type_decl_list RIGHTPAR
                  ;

compound_type_decl:  simple_type_decl
                  |  LEFTPAR simple_type_decl_list RIGHTPAR
                  |  ARRAY LEFTSQPAR TOK_INTEGER RIGHTSQPAR simple_type_decl
                  ;

simple_type_decl  :  TOK_IDENT
                  |  integer_type
                  |  boolean_type
                  ;

integer_type      :  INTEGER range
                  ;

range             :  LEFTSQPAR TOK_INTEGER COMMA TOK_INTEGER RIGHTSQPAR
                  ;

boolean_type      :  BOOLEAN
                  ;

simple_type_decl_list
                  :  simple_type_decl_list simple_type_decl
                  |  simple_type_decl
                  ;

external_list     :  external_list external_decl
                  |  external_decl
                  ;

external_decl     :  TOK_FUNCTION
                  |  TOK_PREDICATE
                  ;

object_list       :  object_list object_def
                  |  object_def
                  ;

object_def        :  ident_list HYPHEN TOK_IDENT
                  |  ident_list HYPHEN integer_type
                  |  ident_list HYPHEN boolean_type 
                  |  ident_list HYPHEN ARRAY LEFTSQPAR TOK_INTEGER RIGHTSQPAR simple_type_decl
                  ;

ident_list        :  ident_list TOK_IDENT
                  |  TOK_IDENT
                  ;

definition_list   :  definition_list definition LEFTPAR
                  |  /* empty */
                  ;

definition        :  logical_def
                  ;

logical_def       :  PREDICATE LEFTPAR TOK_IDENT parameter_list RIGHTPAR formula RIGHTPAR
                  ;

ramification_list :  ramification_def LEFTPAR ramification_list
                  |  /* empty */
                  ;

ramification_def  :  RAMIFICATION TOK_IDENT optional_parameter ramification_def_rest
                  ;

ramification_def_rest
                  :  FORMULA formula RIGHTPAR 
                  |  EFFECT atomic_effect_list RIGHTPAR 
                  ;

optional_parameter
                  :  PARAMETERS parameter_list
                  |  /* empty */
                  ;

parameter_list    :  parameter_list parameter
                  |  parameter
                  ;

parameter         :  variable_list HYPHEN simple_type_decl
                  ;

variable_list     :  variable_list TOK_VIDENT
                  |  TOK_VIDENT
                  ;

action_list       :  action_list LEFTPAR action_def
                  |  action_def
                  ;

action_def        :  ACTION action_name action_body_list RIGHTPAR
                  ;

action_name       :  TOK_IDENT
                  ;

action_body_list  :  action_body_list action_body
                  |  /* empty */
                  ;

action_body       :  PARAMETERS parameter_list
                  |  PRECONDITION precondition_formula
                  |  EFFECT effect_list
                  |  COST cost
                  |  OBSERVATION observation
                  ;

precondition_formula
                  :  formula
                  ;

formula           :  literal_formula
                  |  LEFTPAR AND formula_list RIGHTPAR
                  |  LEFTPAR OR formula_list RIGHTPAR
                  |  LEFTPAR IF formula formula RIGHTPAR
                  |  LEFTPAR IFF formula formula RIGHTPAR
                  |  LEFTPAR EXISTS TOK_VIDENT HYPHEN TOK_IDENT formula RIGHTPAR
                  |  LEFTPAR FORALL TOK_VIDENT HYPHEN TOK_IDENT formula RIGHTPAR
                  ;

formula_list      :  formula_list formula
                  |  formula
                  ;

literal_formula   :  atomic_formula
                  |  LEFTPAR NOT atomic_formula RIGHTPAR
                  ;

atomic_formula    :  LEFTPAR predicate_symbol term_list RIGHTPAR
                  |  LEFTPAR EQUAL term term RIGHTPAR
                  |  LEFTPAR IN term LEFTCURLY term_list RIGHTCURLY RIGHTPAR
                  ;

predicate_symbol  :  primitive_predicate_symbol
                  |  TOK_PREDICATE
                  ;

primitive_predicate_symbol
                  :  LT
                  |  LE
                  |  GE
                  |  GT
                  ;

term_list         :  term_list term
                  |  /* empty */
                  ;

term              :  TOK_VIDENT
                  |  TOK_IDENT optional_subscript
                  |  value
                  |  LEFTPAR TOK_FUNCTION term_list RIGHTPAR
                  |  LEFTPAR primitive_function_symbol term_list RIGHTPAR
                  ;

optional_subscript
                  :  LEFTSQPAR term RIGHTSQPAR
                  |  /* empty */
                  ;

value             :  TOK_INTEGER
                  |  TOK_BOOLEAN
                  ;

primitive_function_symbol
                  :  PLUS optional_modulo
                  |  HYPHEN optional_modulo
                  ;

optional_modulo   :  LEFTANGLE TOK_INTEGER RIGHTANGLE
                  |  /* empty */
                  ;

effect_list       :  atomic_effect_list
                  |  LEFTPAR PROBABILISTIC probabilistic_effect_list RIGHTPAR
                  |  LEFTPAR NON_DETERMINISTIC non_deterministic_effect_list RIGHTPAR
                  ;

atomic_effect_list
                  :  atomic_effect_list atomic_effect
                  |  atomic_effect
                  ;

atomic_effect     :  basic_effect
                  |  LEFTPAR WHEN formula basic_effect_list RIGHTPAR
                  |  LEFTPAR FORALL TOK_VIDENT HYPHEN TOK_IDENT atomic_effect_list RIGHTPAR
                  ;

basic_effect_list :  basic_effect_list basic_effect
                  |  basic_effect
                  ;

basic_effect      :  LEFTPAR SET term term RIGHTPAR
                  |  LEFTPAR SET LEFTPAR TOK_PREDICATE term_list RIGHTPAR term RIGHTPAR
                  |  LEFTPAR SET LEFTPAR TOK_PREDICATE term_list RIGHTPAR formula RIGHTPAR
                  |  LEFTPAR PRINT term RIGHTPAR
                  |  LEFTPAR PRINT formula RIGHTPAR
                  |  PRINTSTATE
                  ;

init_set_effect   :  LEFTPAR SET term IN LEFTCURLY term_list RIGHTCURLY optional_assert RIGHTPAR
                  |  LEFTPAR SET term IN integer_type optional_assert RIGHTPAR
                  |  LEFTPAR SET LEFTPAR TOK_PREDICATE term_list RIGHTPAR IN 
                  |  LEFTPAR ONEOF atomic_init_effect_list RIGHTPAR
                  ;

optional_assert   :  ASSERT formula
                  |  /* empty */
                  ;

probabilistic_effect_list
                  :  probabilistic_effect_list probabilistic_effect
                  |  probabilistic_effect
                  ;

probabilistic_effect
                  :  LEFTPAR TOK_FLOAT atomic_effect_list RIGHTPAR
                  ;

non_deterministic_effect_list
                  :  non_deterministic_effect_list non_deterministic_effect
                  |  non_deterministic_effect
                  ;

non_deterministic_effect
                  :  LEFTPAR atomic_effect_list RIGHTPAR
                  ;

cost              :  TOK_FLOAT
                  |  term
                  |  LEFTPAR IF formula cost cost RIGHTPAR
                  |  LEFTPAR IF formula cost RIGHTPAR
                  |  LEFTPAR SUM TOK_VIDENT HYPHEN TOK_IDENT cost RIGHTPAR
                  ;

observation
                  :  observation_list
                  |  LEFTPAR PROBABILISTIC probabilistic_observation_list RIGHTPAR
                  ;

observation_list  :  observation_list atomic_observation
                  |  atomic_observation
                  ;

atomic_observation
                  :  formula
                  |  term
                  |  LEFTPAR WHEN formula formula RIGHTPAR
                  |  LEFTPAR WHEN formula term RIGHTPAR
                  ;

probabilistic_observation_list
                  :  probabilistic_observation_list probabilistic_observation
                  |  probabilistic_observation
                  ;

probabilistic_observation
                  :  LEFTPAR TOK_FLOAT observation_list RIGHTPAR
                  ;


/*********************************************************************************
** Problem Definition
**/


problem           :  LEFTPAR DEFINE LEFTPAR PROBLEM TOK_IDENT RIGHTPAR 
                       LEFTPAR CDOMAIN TOK_IDENT RIGHTPAR problem_def_list RIGHTPAR
                  ;

problem_def_list  :  problem_def_list problem_def
                  |  /* empty */
                  ; 

problem_def       :  LEFTPAR INIT init_def RIGHTPAR
                  |  LEFTPAR GOAL goal_def RIGHTPAR
                  |  LEFTPAR OBJECTS object_list RIGHTPAR
                  |  LEFTPAR HOOKS hook_list RIGHTPAR
                  ;

init_def          :  atomic_init_effect_list
                  ;

goal_def          :  formula
                  ;

atomic_init_effect_list
                  :  atomic_init_effect_list atomic_init_effect
                  |  atomic_init_effect
                  ;

atomic_init_effect
                  :  basic_effect
                  |  init_set_effect
                  ;

hook_list         :  hook_list hook
                  |  hook
                  ;

hook              :  LEFTPAR MODEL TOK_STRING RIGHTPAR
                  |  LEFTPAR BELIEF TOK_STRING RIGHTPAR
                  |  LEFTPAR HEURISTIC TOK_STRING RIGHTPAR
                  ;


/*********************************************************************************
** Package Processing
**/


package           :  LEFTPAR PACKAGE TOK_IDENT RIGHTPAR
                  ;

%%
